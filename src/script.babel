var placeholder = `
# Welcome to my React Markdown Previewer!

## This is a sub-heading...  

#### Inline Code:
  
Here is some code, \`<div></div>\`, between 2 backticks.

#### Code Block:
\`\`\`
// this is multi-line code:

function anotherExample(firstLine, lastLine) {
  if (firstLine == '\`\`\`' && lastLine == '\`\`\`') {
    return multiLineCode;
  }
}
\`\`\`

You can also make text **bold**, _italic_ or **_both!_**.

You can either ~~cross stuff out~~.

Click [here](https://www.freecodecamp.com) to see the full markdown documentation.

> Block Quotes!

#### Lists:

- they can be unordered.
  - Bulleted.
    - With different indentation levels.
     

1. And there are numbererd lists too.
1. Starting from 1. 

- You can make them using dashes.
* Or asterisks.

#### Images:

![React Logo w/ Text](https://goo.gl/Umyytc)

By [ThiagoRamosCP](https://github.com/thiagoramoscp)
`;

class App extends React.Component {
  constructor(props) {
    super(props)
  }
  render() {
    return (
      <div className="app-box">
        <Header />
        <div className="main-area">
          <Editor />
          <Preview />
        </div>
      </div>
    );
  }
}

const Header = (props) => {
    return (
      <div className="header">
        <h1><span>&lt;&gt;</span> Markdown Previewer</h1>
        <p>Start typing to preview your markup!</p>
      </div>
    );
};

class Editor extends React.Component {
  constructor(props) {
    super(props)
    this.onChange = this.onChange.bind(this);
    this.state = {
      input: placeholder
    };
  }
  
  onChange(event) {
    this.setState({input: event.target.value}, () => {
      let editorText = document.getElementById('editor').innerText;
    document.getElementById('preview').innerHTML = marked(this.state.input);
    }); 
  }
  componentWillMount() { 
    this.setState({input: placeholder}, () => {
      let editorText = document.getElementById('editor').innerText;
    document.getElementById('preview').innerHTML = marked(this.state.input);
    });   
    }
  
  render() { 
    return (
      <div className="editor">
      <textarea id="editor" name="text" rows="15" value={this.state.input} onChange={this.onChange}></textarea>
       </div>
    );
  }
}
const Preview = (props) => {
    return (
      <div className="preview" id="preview">
      </div>
    )
};



ReactDOM.render(<App />, document.getElementById('root'));


/* -- AUTO RESIZE TEXTAREA -- */

$("#editor").on("keyup input", function () {
  $(this).css("height", "auto").css("height", this.scrollHeight + (this.offsetHeight - this.clientHeight))
});

